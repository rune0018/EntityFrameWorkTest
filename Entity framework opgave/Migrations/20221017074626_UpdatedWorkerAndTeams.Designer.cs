// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity_framework_opgave.Migrations
{
    [DbContext(typeof(ProjectmanegerContext))]
    [Migration("20221017074626_UpdatedWorkerAndTeams")]
    partial class UpdatedWorkerAndTeams
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrentTaskID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeamID");

                    b.HasIndex("CurrentTaskID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TeamWorker", b =>
                {
                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkerID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamID", "WorkerID");

                    b.HasIndex("WorkerID");

                    b.ToTable("TeamWorkers");
                });

            modelBuilder.Entity("Todo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaskID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("WorkerID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.HasIndex("WorkerID");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("Worker", b =>
                {
                    b.Property<int>("WorkerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrentTodoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WorkerID");

                    b.HasIndex("CurrentTodoID");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Task", b =>
                {
                    b.HasOne("Team", null)
                        .WithMany("Tasks")
                        .HasForeignKey("TeamID");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.HasOne("Task", "CurrentTask")
                        .WithMany()
                        .HasForeignKey("CurrentTaskID");

                    b.Navigation("CurrentTask");
                });

            modelBuilder.Entity("TeamWorker", b =>
                {
                    b.HasOne("Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Todo", b =>
                {
                    b.HasOne("Task", null)
                        .WithMany("Todos")
                        .HasForeignKey("TaskID");

                    b.HasOne("Worker", null)
                        .WithMany("Todos")
                        .HasForeignKey("WorkerID");
                });

            modelBuilder.Entity("Worker", b =>
                {
                    b.HasOne("Todo", "CurrentTodo")
                        .WithMany()
                        .HasForeignKey("CurrentTodoID");

                    b.Navigation("CurrentTodo");
                });

            modelBuilder.Entity("Task", b =>
                {
                    b.Navigation("Todos");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Worker", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
